---
- name: ensure we have the parameters necessary to package the VM image
  hosts: 'localhost'
  connection: 'local'
  become: no
  gather_facts: no

  pre_tasks:
    - name: ensure all required variables are set
      fail:
        msg: 'This playbook requires {{ item }} to be set.'
      when: item not in vars and item not in hostvars[inventory_hostname]
      with_items:
        - origin_ci_aws_stage_strategy
        - origin_ci_inventory_dir
        - origin_ci_aws_region
        - origin_ci_hosts

    - name: ensure only one AWS instance is running
      fail:
        msg: 'Packaging AMIs with more than one AWS EC2 instance up is not supported.'
      when: "groups['{{ origin_ci_hosts }}'] | length | int > 1"

- name: package the VM image
  hosts: 'localhost'
  connection: 'local'
  become: no
  gather_facts: no

  tasks:
    - name: determine the inventory hostname for the host we are packaging
      set_fact:
        origin_ci_aws_hostname: '{{ groups[origin_ci_hosts][0] }}'

    - name: determine AWS EC2 image metadata
      set_fact:
        origin_ci_aws_ami_os: "{{ hostvars[origin_ci_aws_hostname]['origin_ci_aws_ami_os'] }}"
        origin_ci_aws_ami_stage: "{{ hostvars[origin_ci_aws_hostname]['origin_ci_aws_ami_stage'] }}"
        origin_ci_aws_ami_name: "{{ hostvars[origin_ci_aws_hostname]['origin_ci_aws_ami_name'] }}"
        origin_ci_aws_instance_id: "{{ hostvars[origin_ci_aws_hostname]['origin_ci_aws_instance_id'] }}"
        origin_ci_aws_instance_name: "{{ hostvars[origin_ci_aws_hostname]['origin_ci_aws_instance_name'] }}"

    - name: register stage upgrades
      set_fact:
        origin_ci_image_upgrades:
          bare: base
          base: build
          build: install

    - name: update image stage if we are upgrading stages
      set_fact:
        origin_ci_aws_ami_stage: '{{ origin_ci_image_upgrades[origin_ci_aws_ami_stage] }}'
      when: origin_ci_aws_stage_strategy == 'next'

    - name: update image stage if we are upgrading stages
      set_fact:
        origin_ci_aws_ami_stage: 'fork'
      when: origin_ci_aws_stage_strategy == 'fork'

    - name: update image stage if we are upgrading stages
      set_fact:
        origin_ci_aws_ami_stage: 'base'
      when: origin_ci_aws_stage_strategy == 'base'

    - name: package the Amazon machine image from the running instance
      ec2_ami:
        instance_id: '{{ origin_ci_aws_instance_id }}'
        region: '{{ origin_ci_aws_region }}'
        state: present
        name: '{{ origin_ci_aws_instance_name }}'
        description: 'OpenShift Origin development AMI on {{ origin_ci_aws_ami_os }} at the {{ origin_ci_aws_ami_stage }} stage.'
        tags:
          Name: '{{ origin_ci_aws_instance_name }}'
          operating_system: '{{ origin_ci_aws_ami_os }}'
          image_stage: '{{ origin_ci_aws_ami_stage }}'
          ready: 'no'
        wait: yes
        wait_timeout: 1800

    - name: determine the host variables file for the AWS EC2 host
      set_fact:
        origin_ci_aws_host_vars: '{{ origin_ci_inventory_dir }}/host_vars/{{ origin_ci_aws_hostname }}.yml'

    - name: generate a new set of host variables with the stage updated
      command: "/usr/bin/jq '.origin_ci_aws_ami_stage = \"{{ origin_ci_aws_ami_stage }}\"' {{ origin_ci_aws_host_vars }}"
      register: origin_ci_aws_updated_host_vars

    - name: update the image stage in the host variables for the instance
      copy:
        content: '{{ origin_ci_aws_updated_host_vars.stdout }}'
        dest: '{{ origin_ci_aws_host_vars }}'

    - name: determine AWS EC2 AMI name
      set_fact:
        origin_ci_aws_ami_name: "{{ hostvars[origin_ci_aws_hostname]['origin_ci_aws_instance_name'] }}"
      when: "origin_ci_aws_additional_tags | length > 0"

    - name: search for an AMI to update
      ec2_ami_find:
        region: '{{ origin_ci_aws_region }}'
        ami_tags:
          Name: '{{ origin_ci_aws_ami_name }}'
        sort: 'creationDate'
        sort_order: descending
        sort_end: 1
        no_result_action: fail
      register: ami_facts
      when: "origin_ci_aws_additional_tags | length > 0"

    - name: determine which AMI to update
      set_fact:
        origin_ci_aws_ami_id: '{{ ami_facts.results[0].ami_id }}'
      when: "origin_ci_aws_additional_tags | length > 0"

    - name: add any additional tags
      ec2_tag:
        region: '{{ origin_ci_aws_region }}'
        resource: '{{ origin_ci_aws_ami_id }}'
        tags: "{ '{{ item.key }}': '{{ item.value }}' }"
        state: present
      with_dict: '{{ origin_ci_aws_additional_tags }}'
      when: "origin_ci_aws_additional_tags | length > 0"
